# Generated by Django 2.2.26 on 2022-05-23 18:14

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.manager
import mibios.models
import mibios_umrad.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Dataset',
            fields=[
                ('id', mibios.models.AutoField(primary_key=True, serialize=False)),
                ('accession', models.CharField(blank=True, help_text='accession to data set/study/project', max_length=32)),
                ('accession_db', models.CharField(blank=True, choices=[('NCBI', 'NCBI'), ('JGI', 'JGI'), ('Camera', 'Camera'), ('VAMPS', 'VAMPS')], help_text='Database associated with accession', max_length=8)),
                ('scheme', models.CharField(max_length=512, verbose_name='location and sampling scheme')),
                ('sequencing_data_type', models.CharField(blank=True, help_text='e.g. amplicon, metagenome', max_length=128)),
                ('material_type', models.CharField(max_length=128)),
                ('water_bodies', models.CharField(help_text='list or description of sampled bodies of water', max_length=256)),
                ('primers', models.CharField(blank=True, max_length=64)),
                ('gene_target', models.CharField(blank=True, max_length=64)),
                ('sequencing_platform', models.CharField(blank=True, max_length=64)),
                ('size_fraction', models.CharField(blank=True, help_text='e.g.: >0.22µm or 0.22-1.6µm', max_length=32)),
                ('note', models.TextField(blank=True)),
            ],
            options={
                'default_manager_name': 'objects',
            },
        ),
        migrations.CreateModel(
            name='Sample',
            fields=[
                ('id', mibios.models.AutoField(primary_key=True, serialize=False)),
                ('accession', mibios_umrad.fields.AccessionField()),
                ('contigs_ok', models.BooleanField(default=False, help_text='Contig cluster data and coverage loaded')),
                ('binning_ok', models.BooleanField(default=False, help_text='Binning data loaded')),
                ('checkm_ok', models.BooleanField(default=False, help_text='Binning stats loaded')),
                ('genes_ok', models.BooleanField(default=False, help_text='Gene data and coverage loaded')),
                ('proteins_ok', models.BooleanField(default=False, help_text='Protein data loaded')),
                ('tax_abund_ok', models.BooleanField(default=False, help_text='Taxon abundance data loaded')),
                ('func_abund_ok', models.BooleanField(default=False, help_text='Function abundance data loaded')),
                ('comp_abund_ok', models.BooleanField(default=False, help_text='Compound abundance data loaded')),
                ('read_count', models.PositiveIntegerField(blank=True, default=None, help_text='number of reads (post-QC, fwd+rev) used for assembly mapping', null=True)),
                ('reads_mapped_contigs', models.PositiveIntegerField(blank=True, default=None, help_text='number of reads mapped to contigs', null=True)),
                ('reads_mapped_genes', models.PositiveIntegerField(blank=True, default=None, help_text='number of reads mapped to genes', null=True)),
                ('site', models.CharField(blank=True, max_length=64, verbose_name='Site')),
                ('fraction', models.CharField(blank=True, max_length=64, verbose_name='fraction')),
                ('sample_name', models.CharField(blank=True, max_length=64, verbose_name='Sample_name')),
                ('date', models.DateField(blank=True, null=True, verbose_name='Date')),
                ('station_depth', models.CharField(blank=True, max_length=64, verbose_name='Station Depth (m)')),
                ('sample_depth', models.CharField(blank=True, max_length=64, verbose_name='Sample Depth (m)')),
                ('sample_depth_category', models.CharField(blank=True, max_length=64, verbose_name='Sample Depth (category)')),
                ('local_time', models.CharField(blank=True, max_length=64, verbose_name='Local Time (Eastern Time Zone)')),
                ('latitude', models.CharField(blank=True, max_length=64, verbose_name='Latitude (decimal deg)')),
                ('longitude', models.CharField(blank=True, max_length=64, verbose_name='Longitude (decimal deg)')),
                ('wind_speed', models.CharField(blank=True, max_length=64, verbose_name='Wind speed (knots)')),
                ('wave_height', models.CharField(blank=True, max_length=64, verbose_name='Wave Height (ft)')),
                ('sky', models.CharField(blank=True, max_length=64, verbose_name='Sky')),
                ('secchi_depth', models.CharField(blank=True, max_length=64, verbose_name='Secchi Depth (m)')),
                ('sample_temperature', models.CharField(blank=True, max_length=64, verbose_name='Sample Temperature (°C)')),
                ('ctd_temperature', models.CharField(blank=True, max_length=64, verbose_name='CTD Temperature (°C)')),
                ('ctd_specific_conductivity', models.CharField(blank=True, max_length=64, verbose_name='CTD Specific Conductivity (µS/cm)')),
                ('ctd_beam_attenuation', models.CharField(blank=True, max_length=64, verbose_name='CTD Beam Attenuation (m-1)')),
                ('ctd_tramission', models.CharField(blank=True, max_length=64, verbose_name='CTD Tramission (%)')),
                ('ctd_dissolved_oxygen', models.CharField(blank=True, max_length=64, verbose_name='CTD Dissolved Oxygen (mg/L)')),
                ('ctd_radiation', models.CharField(blank=True, max_length=64, verbose_name='CTD Photosynthetically Active Radiation (µE/m2/s)')),
                ('turbidity', models.CharField(blank=True, max_length=64, verbose_name='Turbidity (NTU)')),
                ('particulate_microcystin', models.CharField(blank=True, max_length=64, verbose_name='Particulate Microcystin (µg/L)')),
                ('dissolved_microcystin', models.CharField(blank=True, max_length=64, verbose_name='Dissolved Microcystin (µg/L)')),
                ('extracted_phycocyanin', models.CharField(blank=True, max_length=64, verbose_name='Extracted Phycocyanin (µg/L)')),
                ('extracted_chlorophyll_a', models.CharField(blank=True, max_length=64, verbose_name='Extracted Chlorophyll a (µg/L)')),
                ('phosphorus', models.CharField(blank=True, max_length=64, verbose_name='Total Phosphorus (µg P/L)')),
                ('dissolved_phosphorus', models.CharField(blank=True, max_length=64, verbose_name='Total Dissolved Phosphorus (µg P/L)')),
                ('soluble_reactive_phosphorus', models.CharField(blank=True, max_length=64, verbose_name='Soluble Reactive Phosphorus (µg P/L)')),
                ('ammonia', models.CharField(blank=True, max_length=64, verbose_name='Ammonia (µg N/L)')),
                ('nitrate_nitrite', models.CharField(blank=True, max_length=64, verbose_name='Nitrate + Nitrite (mg N/L)')),
                ('urea', models.CharField(blank=True, max_length=64, verbose_name='Urea (µg N/L)')),
                ('organic_carbon', models.CharField(blank=True, max_length=64, verbose_name='Particulate Organic Carbon (mg/L)')),
                ('organic_nitrogen', models.CharField(blank=True, max_length=64, verbose_name='Particulate Organic Nitrogen (mg/L)')),
                ('dissolved_organic_carbon', models.CharField(blank=True, max_length=64, verbose_name='Dissolved Organic Carbon (mg/L)')),
                ('absorbance', models.CharField(blank=True, max_length=64, verbose_name='Colored Dissolved Organic Material absorbance (m-1) at 400nm')),
                ('suspended_solids', models.CharField(blank=True, max_length=64, verbose_name='Total Suspended Solids (mg/L)')),
                ('Volatile_suspended_solids', models.CharField(blank=True, max_length=64, verbose_name='Volatile Suspended Solids (mg/L)')),
                ('group', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.OMICS_SAMPLE_GROUP_MODEL)),
            ],
            options={
                'abstract': False,
            },
            managers=[
                ('loader', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='Reference',
            fields=[
                ('id', mibios.models.AutoField(primary_key=True, serialize=False)),
                ('short_reference', models.CharField(help_text='short reference', max_length=128)),
                ('authors', models.CharField(blank=True, help_text='author listing', max_length=2048)),
                ('title', models.CharField(blank=True, max_length=512)),
                ('abstract', models.TextField(blank=True)),
                ('key_words', models.CharField(blank=True, max_length=128)),
                ('publication', models.CharField(max_length=128)),
                ('doi', models.URLField()),
            ],
            options={
                'unique_together': {('short_reference', 'publication')},
            },
        ),
        migrations.AddField(
            model_name='dataset',
            name='reference',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='mibios_glamr.Reference'),
        ),
        migrations.AlterUniqueTogether(
            name='dataset',
            unique_together={('reference', 'accession', 'accession_db')},
        ),
    ]
