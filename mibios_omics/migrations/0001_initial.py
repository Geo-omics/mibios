# Generated by Django 2.2.24 on 2022-01-28 22:24

from django.db import migrations, models
import django.db.models.deletion
import mibios.models
import mibios_omics.fields
import mibios_umrad.fields
import mibios_umrad.model_utils


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('mibios_umrad', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='BinMAX',
            fields=[
                ('id', mibios.models.AutoField(primary_key=True, serialize=False)),
                ('number', models.PositiveIntegerField()),
            ],
            options={
                'verbose_name': 'MaxBin',
                'verbose_name_plural': 'MaxBin bins',
            },
            bases=(models.Model, mibios_umrad.model_utils.LoadMixin),
        ),
        migrations.CreateModel(
            name='BinMET93',
            fields=[
                ('id', mibios.models.AutoField(primary_key=True, serialize=False)),
                ('number', models.PositiveIntegerField()),
            ],
            options={
                'verbose_name': 'MetaBin 97/93',
                'verbose_name_plural': 'MetaBin 97/93 bins',
            },
            bases=(models.Model, mibios_umrad.model_utils.LoadMixin),
        ),
        migrations.CreateModel(
            name='BinMET97',
            fields=[
                ('id', mibios.models.AutoField(primary_key=True, serialize=False)),
                ('number', models.PositiveIntegerField()),
            ],
            options={
                'verbose_name': 'MetaBin 99/97',
                'verbose_name_plural': 'MetaBin 99/97 bins',
            },
            bases=(models.Model, mibios_umrad.model_utils.LoadMixin),
        ),
        migrations.CreateModel(
            name='BinMET99',
            fields=[
                ('id', mibios.models.AutoField(primary_key=True, serialize=False)),
                ('number', models.PositiveIntegerField()),
            ],
            options={
                'verbose_name': 'MetaBin 99/99',
                'verbose_name_plural': 'MetaBin 99/99 bins',
            },
            bases=(models.Model, mibios_umrad.model_utils.LoadMixin),
        ),
        migrations.CreateModel(
            name='CheckM',
            fields=[
                ('id', mibios.models.AutoField(primary_key=True, serialize=False)),
                ('translation_table', models.PositiveSmallIntegerField(verbose_name='Translation table')),
                ('gc_std', models.FloatField(verbose_name='GC std')),
                ('ambiguous_bases', models.PositiveIntegerField(verbose_name='# ambiguous bases')),
                ('genome_size', models.PositiveIntegerField(verbose_name='Genome size')),
                ('longest_contig', models.PositiveIntegerField(verbose_name='Longest contig')),
                ('n50_scaffolds', models.PositiveIntegerField(verbose_name='N50 (scaffolds)')),
                ('mean_scaffold_len', models.FloatField(verbose_name='Mean scaffold length')),
                ('num_contigs', models.PositiveIntegerField(verbose_name='# contigs')),
                ('num_scaffolds', models.PositiveIntegerField(verbose_name='# scaffolds')),
                ('num_predicted_genes', models.PositiveIntegerField(verbose_name='# predicted genes')),
                ('longest_scaffold', models.PositiveIntegerField(verbose_name='Longest scaffold')),
                ('gc', models.FloatField(verbose_name='GC')),
                ('n50_contigs', models.PositiveIntegerField(verbose_name='N50 (contigs)')),
                ('coding_density', models.FloatField(verbose_name='Coding density')),
                ('mean_contig_length', models.FloatField(verbose_name='Mean contig length')),
            ],
            options={
                'verbose_name': 'CheckM',
                'verbose_name_plural': 'CheckM records',
            },
            bases=(models.Model, mibios_umrad.model_utils.LoadMixin),
        ),
        migrations.CreateModel(
            name='ContigCluster',
            fields=[
                ('id', mibios.models.AutoField(primary_key=True, serialize=False)),
                ('seq_offset', models.PositiveIntegerField(blank=True, default=None, null=True)),
                ('seq_bytes', models.PositiveIntegerField(blank=True, default=None, null=True)),
                ('length', models.PositiveIntegerField(blank=True, default=None, null=True)),
                ('bases', models.PositiveIntegerField(blank=True, default=None, null=True)),
                ('coverage', models.DecimalField(blank=True, decimal_places=4, default=None, max_digits=10, null=True)),
                ('reads_mapped', models.PositiveIntegerField(blank=True, default=None, null=True)),
                ('rpkm', models.DecimalField(blank=True, decimal_places=4, default=None, max_digits=10, null=True)),
                ('frags_mapped', models.PositiveIntegerField(blank=True, default=None, null=True)),
                ('fpkm', models.DecimalField(blank=True, decimal_places=4, default=None, max_digits=10, null=True)),
                ('cluster_id', mibios_umrad.fields.AccessionField(max_length=50, prefix='CLUSTER', unique=False)),
                ('bin_m93', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='members', to='mibios_omics.BinMET93')),
                ('bin_m97', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='members', to='mibios_omics.BinMET97')),
                ('bin_m99', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='members', to='mibios_omics.BinMET99')),
                ('bin_max', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='members', to='mibios_omics.BinMAX')),
                ('lca', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='mibios_umrad.Lineage')),
            ],
            bases=(models.Model, mibios_umrad.model_utils.LoadMixin),
        ),
        migrations.CreateModel(
            name='Gene',
            fields=[
                ('id', mibios.models.AutoField(primary_key=True, serialize=False)),
                ('seq_offset', models.PositiveIntegerField(blank=True, default=None, null=True)),
                ('seq_bytes', models.PositiveIntegerField(blank=True, default=None, null=True)),
                ('length', models.PositiveIntegerField(blank=True, default=None, null=True)),
                ('bases', models.PositiveIntegerField(blank=True, default=None, null=True)),
                ('coverage', models.DecimalField(blank=True, decimal_places=4, default=None, max_digits=10, null=True)),
                ('reads_mapped', models.PositiveIntegerField(blank=True, default=None, null=True)),
                ('rpkm', models.DecimalField(blank=True, decimal_places=4, default=None, max_digits=10, null=True)),
                ('frags_mapped', models.PositiveIntegerField(blank=True, default=None, null=True)),
                ('fpkm', models.DecimalField(blank=True, decimal_places=4, default=None, max_digits=10, null=True)),
                ('gene_id', mibios_umrad.fields.AccessionField(max_length=50, prefix='CLUSTER', unique=False)),
                ('start', models.PositiveIntegerField()),
                ('end', models.PositiveIntegerField()),
                ('strand', models.CharField(choices=[('+', '+'), ('-', '-')], max_length=1)),
                ('besthit', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='mibios_umrad.UniRef100')),
                ('contig', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mibios_omics.ContigCluster')),
                ('lca', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mibios_umrad.Lineage')),
            ],
            bases=(models.Model, mibios_umrad.model_utils.LoadMixin),
        ),
        migrations.CreateModel(
            name='RNACentralRep',
            fields=[
                ('id', mibios.models.AutoField(primary_key=True, serialize=False)),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, mibios_umrad.model_utils.LoadMixin),
        ),
        migrations.CreateModel(
            name='Sample',
            fields=[
                ('id', mibios.models.AutoField(primary_key=True, serialize=False)),
                ('accession', mibios_umrad.fields.AccessionField()),
                ('contigs_ok', models.BooleanField(default=False, help_text='Contig cluster data and coverage loaded')),
                ('binning_ok', models.BooleanField(default=False, help_text='Binning data loaded')),
                ('checkm_ok', models.BooleanField(default=False, help_text='Binning stats loaded')),
                ('genes_ok', models.BooleanField(default=False, help_text='Gene data and coverage loaded')),
                ('proteins_ok', models.BooleanField(default=False, help_text='Protein data loaded')),
                ('read_count', models.PositiveIntegerField(blank=True, default=None, help_text='number of reads used for assembly mapping', null=True)),
                ('reads_mapped', models.PositiveIntegerField(blank=True, default=None, help_text='number of reads mapped to assembly', null=True)),
                ('num_ref_sequences', models.PositiveIntegerField(blank=True, default=None, help_text='RefSequences number in coverage file header', null=True)),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, mibios_umrad.model_utils.LoadMixin),
        ),
        migrations.CreateModel(
            name='RNACentral',
            fields=[
                ('id', mibios.models.AutoField(primary_key=True, serialize=False)),
                ('accession', mibios_umrad.fields.AccessionField()),
                ('rna_type', models.PositiveSmallIntegerField(choices=[(1, 'antisense_RNA'), (2, 'autocatalytically_spliced_intron'), (3, 'guide_RNA'), (4, 'hammerhead_ribozyme'), (5, 'lncRNA'), (6, 'miRNA'), (7, 'misc_RNA'), (8, 'ncRNA'), (9, 'other'), (10, 'piRNA'), (11, 'precursor_RNA'), (12, 'pre_miRNA'), (13, 'ribozyme'), (14, 'RNase_MRP_RNA'), (15, 'RNase_P_RNA'), (16, 'rRNA'), (17, 'scaRNA'), (18, 'scRNA'), (19, 'siRNA'), (20, 'snoRNA'), (21, 'snRNA'), (22, 'sRNA'), (23, 'SRP_RNA'), (24, 'telomerase_RNA'), (25, 'tmRNA'), (26, 'tRNA'), (27, 'vault_RNA'), (28, 'Y_RNA')])),
                ('taxon', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mibios_umrad.Taxon')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, mibios_umrad.model_utils.LoadMixin),
        ),
        migrations.CreateModel(
            name='ReadLibrary',
            fields=[
                ('id', mibios.models.AutoField(primary_key=True, serialize=False)),
                ('fwd_qc0_fastq', mibios_omics.fields.DataPathField(base='READS', default=None, max_length=1024, null=True)),
                ('rev_qc0_fastq', mibios_omics.fields.DataPathField(base='READS', default=None, max_length=1024, null=True)),
                ('fwd_qc1_fastq', mibios_omics.fields.DataPathField(base='READS', default=None, max_length=1024, null=True)),
                ('rev_qc1_fastq', mibios_omics.fields.DataPathField(base='READS', default=None, max_length=1024, null=True)),
                ('raw_read_count', models.PositiveIntegerField(blank=True, default=None, null=True)),
                ('qc_read_count', models.PositiveIntegerField(blank=True, default=None, null=True)),
                ('sample', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='reads', to='mibios_omics.Sample')),
            ],
            options={
                'verbose_name_plural': 'read libraries',
            },
            bases=(models.Model, mibios_umrad.model_utils.LoadMixin),
        ),
        migrations.CreateModel(
            name='Protein',
            fields=[
                ('id', mibios.models.AutoField(primary_key=True, serialize=False)),
                ('seq_offset', models.PositiveIntegerField(blank=True, default=None, null=True)),
                ('seq_bytes', models.PositiveIntegerField(blank=True, default=None, null=True)),
                ('gene', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='mibios_omics.Gene')),
                ('sample', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mibios_omics.Sample')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, mibios_umrad.model_utils.LoadMixin),
        ),
        migrations.AddField(
            model_name='gene',
            name='sample',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mibios_omics.Sample'),
        ),
        migrations.AddField(
            model_name='gene',
            name='taxon',
            field=models.ManyToManyField(to='mibios_umrad.Taxon'),
        ),
        migrations.AddField(
            model_name='contigcluster',
            name='sample',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mibios_omics.Sample'),
        ),
        migrations.AddField(
            model_name='contigcluster',
            name='taxon',
            field=models.ManyToManyField(to='mibios_umrad.Taxon'),
        ),
        migrations.AddField(
            model_name='binmet99',
            name='checkm',
            field=models.OneToOneField(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='mibios_omics.CheckM'),
        ),
        migrations.AddField(
            model_name='binmet99',
            name='sample',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mibios_omics.Sample'),
        ),
        migrations.AddField(
            model_name='binmet97',
            name='checkm',
            field=models.OneToOneField(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='mibios_omics.CheckM'),
        ),
        migrations.AddField(
            model_name='binmet97',
            name='sample',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mibios_omics.Sample'),
        ),
        migrations.AddField(
            model_name='binmet93',
            name='checkm',
            field=models.OneToOneField(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='mibios_omics.CheckM'),
        ),
        migrations.AddField(
            model_name='binmet93',
            name='sample',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mibios_omics.Sample'),
        ),
        migrations.AddField(
            model_name='binmax',
            name='checkm',
            field=models.OneToOneField(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='mibios_omics.CheckM'),
        ),
        migrations.AddField(
            model_name='binmax',
            name='sample',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mibios_omics.Sample'),
        ),
        migrations.CreateModel(
            name='NCRNA',
            fields=[
                ('id', mibios.models.AutoField(primary_key=True, serialize=False)),
                ('part', models.PositiveIntegerField(blank=True, default=None, null=True)),
                ('flag', models.PositiveIntegerField(help_text='bitwise FLAG')),
                ('pos', models.PositiveIntegerField(help_text='1-based leftmost mapping position')),
                ('mapq', models.PositiveIntegerField(help_text='MAPing Quality')),
                ('contig', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mibios_omics.ContigCluster')),
                ('match', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mibios_omics.RNACentralRep')),
                ('sample', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mibios_omics.Sample')),
            ],
            options={
                'unique_together': {('sample', 'contig', 'part')},
            },
            bases=(models.Model, mibios_umrad.model_utils.LoadMixin),
        ),
        migrations.AlterUniqueTogether(
            name='gene',
            unique_together={('sample', 'gene_id')},
        ),
        migrations.AlterUniqueTogether(
            name='contigcluster',
            unique_together={('sample', 'cluster_id')},
        ),
    ]
