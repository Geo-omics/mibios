# Generated by Django 2.2.24 on 2021-07-22 17:05

from django.db import migrations, models
import django.db.models.deletion
import mibios.models
import mibios_omics.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('mibios', '0016_importfile_note'),
    ]

    operations = [
        migrations.CreateModel(
            name='Analysis',
            fields=[
                ('id', mibios.models.AutoField(primary_key=True, serialize=False)),
                ('accession', models.CharField(max_length=32, unique=True, verbose_name='analysis id')),
                ('method', models.CharField(help_text='name, short description, or reference to SOP', max_length=64)),
                ('description', models.TextField(blank=True, help_text='free-form description of SOP')),
                ('history', models.ManyToManyField(to='mibios.ChangeRecord')),
            ],
            options={
                'verbose_name_plural': 'analyses',
            },
        ),
        migrations.CreateModel(
            name='CollectionSite',
            fields=[
                ('id', mibios.models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, default=None, help_text='unique site identifier', max_length=255, null=True, unique=True, verbose_name='site name')),
                ('location', models.CharField(blank=True, default='', help_text='Geographic name, name of lake or city', max_length=255, verbose_name='geographic location')),
                ('location_description', models.CharField(blank=True, default='', help_text='Further description of location', max_length=255)),
                ('latitude', models.DecimalField(blank=True, decimal_places=12, default=None, help_text='latitude in decimal degrees', max_digits=15, null=True)),
                ('longitude', models.DecimalField(blank=True, decimal_places=12, default=None, help_text='longitude in decimal degrees', max_digits=15, null=True)),
                ('depth', models.PositiveSmallIntegerField(blank=True, default=None, help_text='water depth in meters', null=True)),
                ('history', models.ManyToManyField(to='mibios.ChangeRecord')),
            ],
            options={
                'unique_together': {('latitude', 'longitude')},
            },
        ),
        migrations.CreateModel(
            name='Compound',
            fields=[
                ('id', mibios.models.AutoField(primary_key=True, serialize=False)),
                ('source_accession', models.CharField(max_length=32)),
                ('source_db', models.CharField(choices=[('KEGG', 'KEGG'), ('CHEBI', 'CHEBI'), ('biocyc', 'biocyc')], max_length=32)),
                ('name', models.CharField(help_text='human readable name', max_length=255)),
                ('mol_mass', models.DecimalField(blank=True, decimal_places=12, default=None, max_digits=15, null=True)),
                ('formula', models.CharField(blank=True, default='', max_length=64)),
                ('charge', models.CharField(blank=True, default='', max_length=16)),
                ('history', models.ManyToManyField(to='mibios.ChangeRecord')),
            ],
            options={
                'unique_together': {('source_accession', 'source_db')},
            },
        ),
        migrations.CreateModel(
            name='Contig',
            fields=[
                ('id', mibios.models.AutoField(primary_key=True, serialize=False)),
                ('accession', models.CharField(max_length=32, unique=True, verbose_name='contig id')),
                ('analysis', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mibios_omics.Analysis')),
                ('history', models.ManyToManyField(to='mibios.ChangeRecord')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ContigCluster',
            fields=[
                ('id', mibios.models.AutoField(primary_key=True, serialize=False)),
                ('accession', models.CharField(max_length=32, unique=True, verbose_name='contig cluster id')),
                ('history', models.ManyToManyField(to='mibios.ChangeRecord')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Gene',
            fields=[
                ('id', mibios.models.AutoField(primary_key=True, serialize=False)),
                ('accession', models.CharField(max_length=32, unique=True, verbose_name='gene id')),
                ('name', models.CharField(max_length=255)),
                ('gene_type', models.CharField(help_text='choice of asv, xrna, protein, ...', max_length=32)),
                ('start', models.IntegerField()),
                ('end', models.IntegerField()),
                ('strand', models.BooleanField(choices=[(True, '+'), (False, '-')])),
                ('length', models.PositiveIntegerField()),
                ('gc_content', models.FloatField(verbose_name='% GC')),
                ('partial_start', models.BooleanField()),
                ('partial_end', models.BooleanField()),
                ('contig', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mibios_omics.Contig')),
                ('history', models.ManyToManyField(to='mibios.ChangeRecord')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GeneCluster',
            fields=[
                ('id', mibios.models.AutoField(primary_key=True, serialize=False)),
                ('accession', models.CharField(max_length=32, unique=True, verbose_name='gene cluster id')),
                ('history', models.ManyToManyField(to='mibios.ChangeRecord')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Pathway',
            fields=[
                ('id', mibios.models.AutoField(primary_key=True, serialize=False)),
                ('source_accession', models.CharField(max_length=32)),
                ('source_db', models.CharField(choices=[('KEGG', 'KEGG'), ('biocyc', 'biocyc')], max_length=16)),
                ('history', models.ManyToManyField(to='mibios.ChangeRecord')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Protein',
            fields=[
                ('id', mibios.models.AutoField(primary_key=True, serialize=False)),
                ('accession', models.CharField(max_length=32, unique=True, verbose_name='protein id')),
                ('length', models.PositiveIntegerField()),
                ('partial', models.CharField(blank=True, default='', max_length=8)),
                ('gene', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mibios_omics.Gene')),
                ('history', models.ManyToManyField(to='mibios.ChangeRecord')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ProteinCluster',
            fields=[
                ('id', mibios.models.AutoField(primary_key=True, serialize=False)),
                ('accession', models.CharField(max_length=32, unique=True, verbose_name='protein cluster id')),
                ('history', models.ManyToManyField(to='mibios.ChangeRecord')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Reaction',
            fields=[
                ('id', mibios.models.AutoField(primary_key=True, serialize=False)),
                ('source_accession', models.CharField(max_length=32, verbose_name='reaction id')),
                ('source_db', models.CharField(choices=[('KEGG', 'KEGG'), ('RHEA', 'RHEA'), ('biocyc', 'biocyc')], max_length=32, verbose_name='source database')),
                ('name', models.CharField(max_length=255, verbose_name='human readable name')),
                ('history', models.ManyToManyField(to='mibios.ChangeRecord')),
            ],
            options={
                'unique_together': {('source_accession', 'source_db')},
            },
        ),
        migrations.CreateModel(
            name='Sample',
            fields=[
                ('id', mibios.models.AutoField(primary_key=True, serialize=False)),
                ('accession', models.CharField(max_length=32, unique=True, verbose_name='primary sample id')),
                ('isolation_source', models.CharField(max_length=32)),
                ('collection_date', models.DateField()),
                ('sample_depth', models.CharField(blank=True, default='', max_length=32)),
                ('ph', models.DecimalField(blank=True, decimal_places=2, default=None, max_digits=3, null=True, verbose_name='pH')),
                ('temperature', models.DecimalField(blank=True, decimal_places=1, default=None, help_text='temperature in degree Celsius', max_digits=3, null=True)),
                ('secci', models.DecimalField(blank=True, decimal_places=1, default=None, max_digits=3, null=True)),
                ('partmc', models.DecimalField(blank=True, decimal_places=1, default=None, max_digits=3, null=True, verbose_name='PartMC')),
                ('dissmc', models.DecimalField(blank=True, decimal_places=1, default=None, max_digits=3, null=True, verbose_name='DissMC')),
                ('phycocyanin', models.DecimalField(blank=True, decimal_places=1, default=None, max_digits=3, null=True)),
                ('chla', models.DecimalField(blank=True, decimal_places=2, default=None, max_digits=3, null=True)),
                ('doc', models.DecimalField(blank=True, decimal_places=1, default=None, max_digits=3, null=True, verbose_name='DOC')),
                ('cdom', models.DecimalField(blank=True, decimal_places=1, default=None, max_digits=3, null=True, verbose_name='CDOM')),
                ('collection_site', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='mibios_omics.CollectionSite')),
                ('history', models.ManyToManyField(to='mibios.ChangeRecord')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SecondarySample',
            fields=[
                ('id', mibios.models.AutoField(primary_key=True, serialize=False)),
                ('accession', models.CharField(max_length=32, unique=True, verbose_name='sample id')),
                ('public_accession', models.CharField(blank=True, default='', max_length=32)),
                ('size_fraction', models.CharField(blank=True, default='', max_length=32)),
                ('seq_type', models.CharField(max_length=32, verbose_name='sequencing project type')),
                ('history', models.ManyToManyField(to='mibios.ChangeRecord')),
                ('sample', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mibios_omics.Sample')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MetabolomeSample',
            fields=[
                ('secondarysample_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='mibios_omics.SecondarySample')),
                ('ms_type', models.CharField(blank=True, default='', max_length=32)),
                ('is_targeted', models.BooleanField(verbose_name='is targeted (or whole)')),
                ('spike_in', models.CharField(blank=True, default='', max_length=64, verbose_name='spike-in/standard')),
            ],
            options={
                'abstract': False,
            },
            bases=('mibios_omics.secondarysample',),
        ),
        migrations.CreateModel(
            name='MetaproteomeSample',
            fields=[
                ('secondarysample_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='mibios_omics.SecondarySample')),
                ('ms_type', models.CharField(blank=True, default='', max_length=32)),
                ('is_labeled', models.BooleanField(verbose_name='labeled')),
                ('spike_in', models.CharField(blank=True, default='', max_length=64, verbose_name='spike-in/standard')),
            ],
            options={
                'abstract': False,
            },
            bases=('mibios_omics.secondarysample',),
        ),
        migrations.CreateModel(
            name='SequencedSample',
            fields=[
                ('secondarysample_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='mibios_omics.SecondarySample')),
                ('reads_location', models.CharField(blank=True, default='', help_text='URL, path, SRA accession, or similar to one or multiple FASTQ files. Can be glob or regex.', max_length=255)),
                ('read_yield', models.PositiveIntegerField(verbose_name='total read count / yield')),
            ],
            options={
                'abstract': False,
            },
            bases=('mibios_omics.secondarysample',),
        ),
        migrations.CreateModel(
            name='UniRef100',
            fields=[
                ('id', mibios.models.AutoField(primary_key=True, serialize=False)),
                ('accession', models.CharField(max_length=32, unique=True, verbose_name='UniRef100 accession')),
                ('protein_name', models.CharField(blank=True, default='', max_length=32)),
                ('taxonomic_lineage_id', models.CharField(blank=True, default='', max_length=32)),
                ('taxonomic_lineage_species', models.CharField(blank=True, default='', max_length=32)),
                ('organism', models.CharField(blank=True, default='', max_length=32)),
                ('dna_binding', models.CharField(blank=True, default='', max_length=32)),
                ('metal_binding', models.CharField(blank=True, default='', max_length=32)),
                ('signal_peptide', models.CharField(blank=True, default='', max_length=32)),
                ('transmembrane', models.CharField(blank=True, default='', max_length=32)),
                ('subcellular_location', models.CharField(blank=True, default='', max_length=32)),
                ('tcdb', models.CharField(blank=True, default='', max_length=32)),
                ('cog_kog', models.CharField(blank=True, default='', max_length=32)),
                ('pfam', models.CharField(blank=True, default='', max_length=32)),
                ('tigrfams', models.CharField(blank=True, default='', max_length=32)),
                ('kegg', models.CharField(blank=True, default='', max_length=32)),
                ('gene_ontology', models.CharField(blank=True, default='', max_length=32)),
                ('interpro', models.CharField(blank=True, default='', max_length=32)),
                ('ec_number', models.CharField(blank=True, default='', max_length=32)),
                ('history', models.ManyToManyField(to='mibios.ChangeRecord')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Taxonomy',
            fields=[
                ('id', mibios.models.AutoField(primary_key=True, serialize=False)),
                ('accession', models.CharField(max_length=32, unique=True, verbose_name='NCBI taxonomy ID')),
                ('rank', models.CharField(max_length=32)),
                ('name', models.CharField(max_length=255)),
                ('name_type', models.CharField(max_length=32)),
                ('history', models.ManyToManyField(to='mibios.ChangeRecord')),
                ('parent', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='mibios_omics.Taxonomy')),
            ],
            options={
                'verbose_name_plural': 'taxa',
                'unique_together': {('rank', 'name', 'name_type')},
            },
        ),
        migrations.CreateModel(
            name='Study',
            fields=[
                ('id', mibios.models.AutoField(primary_key=True, serialize=False)),
                ('accession', models.CharField(max_length=32, unique=True, verbose_name='study id')),
                ('sampling_scheme', models.CharField(blank=True, default='', max_length=255)),
                ('history', models.ManyToManyField(to='mibios.ChangeRecord')),
            ],
            options={
                'verbose_name_plural': 'studies',
            },
        ),
        migrations.CreateModel(
            name='SequencingProject',
            fields=[
                ('id', mibios.models.AutoField(primary_key=True, serialize=False)),
                ('run', mibios_omics.models.NullCharField(blank=True, default='', max_length=32, verbose_name='sequencing run id')),
                ('provider', models.CharField(max_length=255, verbose_name='sequencing center')),
                ('platform', models.CharField(max_length=255, verbose_name='sequencing platform')),
                ('sequencing_type', models.CharField(choices=[('amplicon', 'amplicon'), ('metagenome', 'metagenome'), ('metatranscriptome', 'metatranscriptome')], max_length=32)),
                ('library_kit', models.CharField(max_length=32)),
                ('spike_in', models.CharField(blank=True, default='', max_length=64, verbose_name='spike-in/standard')),
                ('sop', models.CharField(blank=True, default='', help_text='description or link to SOP, or similar', max_length=255)),
                ('gene_target', models.CharField(blank=True, default='', help_text='for amplicon sequencing only', max_length=16)),
                ('primers', models.CharField(blank=True, default='', help_text='for amplicon sequencing only', max_length=16)),
                ('history', models.ManyToManyField(to='mibios.ChangeRecord')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Sequence',
            fields=[
                ('id', mibios.models.AutoField(primary_key=True, serialize=False)),
                ('seq', models.TextField()),
                ('length', models.PositiveIntegerField()),
                ('history', models.ManyToManyField(to='mibios.ChangeRecord')),
                ('lca', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='mibios_omics.Taxonomy')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='sample',
            name='study',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mibios_omics.Study'),
        ),
        migrations.CreateModel(
            name='RNA_DB',
            fields=[
                ('id', mibios.models.AutoField(primary_key=True, serialize=False)),
                ('accession', models.CharField(max_length=32, unique=True, verbose_name='RNA DB id')),
                ('rna_type', models.CharField(max_length=32, verbose_name='type')),
                ('data_source', models.CharField(max_length=32, verbose_name='RNAcentral / SILVA reference')),
                ('history', models.ManyToManyField(to='mibios.ChangeRecord')),
                ('lca', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lca_for_rna_db', to='mibios_omics.Taxonomy')),
                ('taxon', models.ManyToManyField(to='mibios_omics.Taxonomy')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ReactionEquivGroup',
            fields=[
                ('id', mibios.models.AutoField(primary_key=True, serialize=False)),
                ('history', models.ManyToManyField(to='mibios.ChangeRecord')),
                ('pathway', models.ManyToManyField(to='mibios_omics.Pathway')),
                ('product', models.ManyToManyField(related_name='func_with_output', to='mibios_omics.Compound')),
                ('reactant', models.ManyToManyField(related_name='func_with_input', to='mibios_omics.Compound')),
                ('reaction', models.ManyToManyField(to='mibios_omics.Reaction')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Publication',
            fields=[
                ('id', mibios.models.AutoField(primary_key=True, serialize=False)),
                ('bib_entry', mibios_omics.models.NullCharField(blank=True, default=None, max_length=255, null=True, unique=True)),
                ('authors', models.CharField(blank=True, default='', max_length=1024)),
                ('title', models.CharField(blank=True, default='', max_length=512)),
                ('abstract', models.TextField(blank=True, default='')),
                ('keywords', models.CharField(blank=True, default='', max_length=255)),
                ('journal', models.CharField(blank=True, default='', max_length=255)),
                ('journal_code', models.CharField(blank=True, default='', max_length=32)),
                ('doi', mibios_omics.models.NullCharField(blank=True, default=None, max_length=64, null=True, unique=True)),
                ('pubmed', mibios_omics.models.NullCharField(blank=True, default=None, max_length=32, null=True, unique=True)),
                ('gene', models.ManyToManyField(to='mibios_omics.Gene')),
                ('history', models.ManyToManyField(to='mibios.ChangeRecord')),
                ('sample', models.ManyToManyField(to='mibios_omics.Sample')),
                ('study', models.ManyToManyField(to='mibios_omics.Study')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ProteinSequence',
            fields=[
                ('id', mibios.models.AutoField(primary_key=True, serialize=False)),
                ('seq', models.TextField()),
                ('length', models.PositiveIntegerField()),
                ('history', models.ManyToManyField(to='mibios.ChangeRecord')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ProteinClusterMembership',
            fields=[
                ('id', mibios.models.AutoField(primary_key=True, serialize=False)),
                ('ani', models.DecimalField(decimal_places=3, max_digits=6)),
                ('cov', models.DecimalField(decimal_places=3, max_digits=6)),
                ('cluster', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mibios_omics.ProteinCluster')),
                ('protein', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mibios_omics.Protein')),
            ],
            options={
                'unique_together': {('cluster', 'protein')},
            },
        ),
        migrations.CreateModel(
            name='ProteinClusterLevel',
            fields=[
                ('id', mibios.models.AutoField(primary_key=True, serialize=False)),
                ('label', models.CharField(max_length=16, unique=True)),
                ('ani', models.SmallIntegerField(verbose_name='% ANI')),
                ('cov', models.SmallIntegerField(verbose_name='% coverage')),
                ('history', models.ManyToManyField(to='mibios.ChangeRecord')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='proteincluster',
            name='level',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mibios_omics.ProteinClusterLevel'),
        ),
        migrations.AddField(
            model_name='proteincluster',
            name='members',
            field=models.ManyToManyField(through='mibios_omics.ProteinClusterMembership', to='mibios_omics.Protein'),
        ),
        migrations.AddField(
            model_name='proteincluster',
            name='rep',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='representing', to='mibios_omics.Protein'),
        ),
        migrations.AddField(
            model_name='proteincluster',
            name='uniref100',
            field=models.ForeignKey(help_text='UniRef100 top hit', on_delete=django.db.models.deletion.CASCADE, to='mibios_omics.UniRef100'),
        ),
        migrations.AddField(
            model_name='protein',
            name='lca',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='protein_with_lca', to='mibios_omics.Taxonomy'),
        ),
        migrations.AddField(
            model_name='protein',
            name='reaction',
            field=models.ManyToManyField(to='mibios_omics.ReactionEquivGroup'),
        ),
        migrations.AddField(
            model_name='protein',
            name='sequence',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mibios_omics.ProteinSequence'),
        ),
        migrations.AddField(
            model_name='protein',
            name='taxon',
            field=models.ManyToManyField(to='mibios_omics.Taxonomy'),
        ),
        migrations.AddField(
            model_name='protein',
            name='uniref100',
            field=models.ManyToManyField(to='mibios_omics.UniRef100'),
        ),
        migrations.CreateModel(
            name='GeneClusterMembership',
            fields=[
                ('id', mibios.models.AutoField(primary_key=True, serialize=False)),
                ('ani', models.DecimalField(decimal_places=3, max_digits=6)),
                ('cov', models.DecimalField(decimal_places=3, max_digits=6)),
                ('cluster', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mibios_omics.GeneCluster')),
                ('gene', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mibios_omics.Gene')),
            ],
            options={
                'unique_together': {('cluster', 'gene')},
            },
        ),
        migrations.CreateModel(
            name='GeneClusterLevel',
            fields=[
                ('id', mibios.models.AutoField(primary_key=True, serialize=False)),
                ('label', models.CharField(max_length=16, unique=True)),
                ('ani', models.SmallIntegerField(verbose_name='% ANI')),
                ('cov', models.SmallIntegerField(verbose_name='% coverage')),
                ('history', models.ManyToManyField(to='mibios.ChangeRecord')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='genecluster',
            name='level',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mibios_omics.GeneClusterLevel'),
        ),
        migrations.AddField(
            model_name='genecluster',
            name='members',
            field=models.ManyToManyField(through='mibios_omics.GeneClusterMembership', to='mibios_omics.Gene'),
        ),
        migrations.AddField(
            model_name='genecluster',
            name='rep',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='representing', to='mibios_omics.Gene'),
        ),
        migrations.AddField(
            model_name='genecluster',
            name='rna_db',
            field=models.ForeignKey(blank=True, default=None, help_text='RNA DB top hit', null=True, on_delete=django.db.models.deletion.SET_NULL, to='mibios_omics.RNA_DB'),
        ),
        migrations.AddField(
            model_name='genecluster',
            name='uniref100',
            field=models.ForeignKey(help_text='UniRef100 top hit', on_delete=django.db.models.deletion.CASCADE, to='mibios_omics.UniRef100'),
        ),
        migrations.AddField(
            model_name='gene',
            name='lca',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='gene_with_lca', to='mibios_omics.Taxonomy'),
        ),
        migrations.AddField(
            model_name='gene',
            name='rna_db',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mibios_omics.RNA_DB'),
        ),
        migrations.AddField(
            model_name='gene',
            name='taxon',
            field=models.ManyToManyField(to='mibios_omics.Taxonomy'),
        ),
        migrations.AddField(
            model_name='gene',
            name='uniref100',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mibios_omics.UniRef100'),
        ),
        migrations.CreateModel(
            name='ContigClusterMembership',
            fields=[
                ('id', mibios.models.AutoField(primary_key=True, serialize=False)),
                ('ani', models.DecimalField(decimal_places=3, max_digits=6)),
                ('cov', models.DecimalField(decimal_places=3, max_digits=6)),
                ('cluster', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mibios_omics.ContigCluster')),
                ('contig', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mibios_omics.Contig')),
            ],
            options={
                'unique_together': {('cluster', 'contig')},
            },
        ),
        migrations.CreateModel(
            name='ContigClusterLevel',
            fields=[
                ('id', mibios.models.AutoField(primary_key=True, serialize=False)),
                ('label', models.CharField(max_length=16, unique=True)),
                ('ani', models.SmallIntegerField(verbose_name='% ANI')),
                ('cov', models.SmallIntegerField(verbose_name='% coverage')),
                ('history', models.ManyToManyField(to='mibios.ChangeRecord')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='contigcluster',
            name='level',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mibios_omics.ContigClusterLevel'),
        ),
        migrations.AddField(
            model_name='contigcluster',
            name='members',
            field=models.ManyToManyField(through='mibios_omics.ContigClusterMembership', to='mibios_omics.Contig'),
        ),
        migrations.AddField(
            model_name='contigcluster',
            name='rep',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='representing', to='mibios_omics.Contig'),
        ),
        migrations.AddField(
            model_name='contig',
            name='sequence',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mibios_omics.Sequence'),
        ),
        migrations.CreateModel(
            name='AmpliconSample',
            fields=[
                ('sequencedsample_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='mibios_omics.SequencedSample')),
            ],
            options={
                'abstract': False,
            },
            bases=('mibios_omics.sequencedsample',),
        ),
        migrations.CreateModel(
            name='MetagenomeSample',
            fields=[
                ('sequencedsample_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='mibios_omics.SequencedSample')),
            ],
            options={
                'abstract': False,
            },
            bases=('mibios_omics.sequencedsample',),
        ),
        migrations.CreateModel(
            name='MetaTranscriptomeSample',
            fields=[
                ('sequencedsample_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='mibios_omics.SequencedSample')),
            ],
            options={
                'abstract': False,
            },
            bases=('mibios_omics.sequencedsample',),
        ),
        migrations.AddField(
            model_name='sequencedsample',
            name='seq_project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mibios_omics.SequencingProject'),
        ),
        migrations.CreateModel(
            name='ProteinAbundance',
            fields=[
                ('id', mibios.models.AutoField(primary_key=True, serialize=False)),
                ('absolute', models.FloatField(verbose_name='avg fold')),
                ('relative', models.FloatField(help_text='RPKM/FPKM')),
                ('cover', models.FloatField(verbose_name='% covered')),
                ('Protein', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mibios_omics.Protein')),
                ('analysis', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mibios_omics.Analysis')),
                ('sample', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mibios_omics.SequencedSample')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PeptideAbundance',
            fields=[
                ('id', mibios.models.AutoField(primary_key=True, serialize=False)),
                ('relative', models.DecimalField(decimal_places=3, max_digits=6, verbose_name='relative intensity')),
                ('cover', models.FloatField(verbose_name='% covered')),
                ('analysis', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mibios_omics.Analysis')),
                ('protein_sequence', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mibios_omics.ProteinSequence')),
                ('sample', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mibios_omics.MetaproteomeSample')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GeneAbundance',
            fields=[
                ('id', mibios.models.AutoField(primary_key=True, serialize=False)),
                ('absolute', models.FloatField(verbose_name='avg fold')),
                ('relative', models.FloatField(help_text='RPKM/FPKM (or % for amplicon?)')),
                ('cover', models.FloatField(verbose_name='% covered')),
                ('analysis', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mibios_omics.Analysis')),
                ('gene', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mibios_omics.Gene')),
                ('sample', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mibios_omics.SequencedSample')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ContigAbundance',
            fields=[
                ('id', mibios.models.AutoField(primary_key=True, serialize=False)),
                ('absolute', models.FloatField(verbose_name='avg fold')),
                ('relative', models.FloatField(verbose_name='fpkm')),
                ('cover', models.FloatField(verbose_name='% covered')),
                ('analysis', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mibios_omics.Analysis')),
                ('contig', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mibios_omics.Contig')),
                ('sample', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mibios_omics.SequencedSample')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CompoundAbundance',
            fields=[
                ('id', mibios.models.AutoField(primary_key=True, serialize=False)),
                ('m_over_z', models.FloatField(verbose_name='m/z')),
                ('intensity', models.CharField(max_length=32)),
                ('retention_time', models.DecimalField(decimal_places=3, max_digits=5)),
                ('relative', models.DecimalField(decimal_places=3, max_digits=5, verbose_name='relative abundance')),
                ('compound', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mibios_omics.Compound')),
                ('sample', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mibios_omics.MetabolomeSample')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='analysis',
            name='sample',
            field=models.ManyToManyField(to='mibios_omics.SequencedSample'),
        ),
        migrations.CreateModel(
            name='MetaTranscriptAbundance',
            fields=[
                ('id', mibios.models.AutoField(primary_key=True, serialize=False)),
                ('absolute', models.FloatField(verbose_name='avg fold')),
                ('relative', models.FloatField(help_text='RPKM/FPKM (or % for amplicon?)')),
                ('cover', models.FloatField(verbose_name='% covered')),
                ('analysis', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mibios_omics.Analysis')),
                ('gene_sequence', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mibios_omics.Sequence')),
                ('sample', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mibios_omics.MetaTranscriptomeSample')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
