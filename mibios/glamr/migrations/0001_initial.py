# Generated by Django 3.2.16 on 2023-02-01 23:00

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.manager
import mibios.glamr.fields
import mibios.models
import mibios.umrad.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='Dataset',
            fields=[
                ('id', mibios.models.AutoField(primary_key=True, serialize=False)),
                ('short_name', models.CharField(blank=True, default=None, help_text='a short name or description, for internal use, not (necessarily) for public display', max_length=64, null=True, unique=True)),
                ('dataset_id', mibios.umrad.fields.AccessionField(help_text='GLAMR accession to data set/study/project', verbose_name='Dataset ID')),
                ('bioproject', models.TextField(blank=True, default='', max_length=32)),
                ('jgi_project', models.TextField(blank=True, default='', max_length=32)),
                ('gold_id', models.TextField(blank=True, default='', max_length=32)),
                ('scheme', models.TextField(blank=True, default='', verbose_name='location and sampling scheme')),
                ('material_type', models.TextField(blank=True, default='')),
                ('water_bodies', models.TextField(blank=True, default='', help_text='list or description of sampled bodies of water')),
                ('primers', models.TextField(blank=True, default='', max_length=32)),
                ('sequencing_target', models.TextField(blank=True, default='', max_length=32)),
                ('sequencing_platform', models.TextField(blank=True, default='', max_length=32)),
                ('size_fraction', models.TextField(blank=True, default='', help_text='e.g.: >0.22µm or 0.22-1.6µm', max_length=32)),
                ('note', models.TextField(blank=True, default='')),
            ],
            options={
                'default_manager_name': 'objects',
            },
        ),
        migrations.CreateModel(
            name='Reference',
            fields=[
                ('id', mibios.models.AutoField(primary_key=True, serialize=False)),
                ('reference_id', mibios.umrad.fields.AccessionField(prefix='paper_')),
                ('short_reference', models.TextField(help_text='short reference', max_length=32)),
                ('authors', models.TextField(blank=True, default='', help_text='author listing')),
                ('title', models.TextField(blank=True, default='')),
                ('abstract', models.TextField(blank=True, default='')),
                ('key_words', models.TextField(blank=True, default='')),
                ('publication', models.TextField(blank=True, default='', max_length=64)),
                ('doi', mibios.glamr.fields.OptionalURLField(blank=True, default=None, null=True, unique=True)),
            ],
            managers=[
                ('loader', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='SearchTerm',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('term', models.TextField(db_index=True, max_length=32)),
                ('has_hit', models.BooleanField(default=False)),
                ('object_id', models.PositiveIntegerField()),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
            ],
        ),
        migrations.CreateModel(
            name='Sample',
            fields=[
                ('id', mibios.models.AutoField(primary_key=True, serialize=False)),
                ('sample_id', models.CharField(blank=True, default=None, help_text='internal sample accession', max_length=32, null=True, unique=True)),
                ('tracking_id', models.CharField(blank=True, default=None, help_text='internal uniform hex id', max_length=32, null=True, unique=True)),
                ('sample_name', models.TextField(help_text='sample ID or name as given by study', max_length=32)),
                ('sample_type', models.CharField(blank=True, choices=[('amplicon', 'amplicon'), ('metagenome', 'metagenome'), ('metatranscriptome', 'metatranscriptome')], default=None, max_length=32, null=True)),
                ('has_paired_data', models.BooleanField(blank=True, default=None, null=True)),
                ('sra_accession', models.TextField(blank=True, default='', help_text='SRA accession', max_length=16)),
                ('amplicon_target', models.TextField(blank=True, default='', max_length=16)),
                ('fwd_primer', models.TextField(blank=True, default='', max_length=32)),
                ('rev_primer', models.TextField(blank=True, default='', max_length=32)),
                ('meta_data_loaded', models.BooleanField(default=False, help_text='meta data successfully loaded')),
                ('metag_pipeline_reg', models.BooleanField(default=False, help_text='is registered in metagenomic pipeline, has tracking ID')),
                ('contig_fasta_loaded', models.BooleanField(default=False, help_text='contig fasta data loaded')),
                ('gene_fasta_loaded', models.BooleanField(default=False, help_text='gene fasta data loaded')),
                ('contig_abundance_loaded', models.BooleanField(default=False, help_text='contig abundance/rpkm data data loaded')),
                ('gene_abundance_loaded', models.BooleanField(default=False, help_text='gene abundance/rpkm data loaded')),
                ('gene_alignment_hits_loaded', models.BooleanField(default=False, help_text='gene alignment hits to UniRef100 loaded')),
                ('binning_ok', models.BooleanField(default=False, help_text='Binning data loaded')),
                ('checkm_ok', models.BooleanField(default=False, help_text='Binning stats loaded')),
                ('genes_ok', models.BooleanField(default=False, help_text='Gene data and coverage loaded')),
                ('proteins_ok', models.BooleanField(default=False, help_text='Protein data loaded')),
                ('tax_abund_ok', models.BooleanField(default=False, help_text='Taxon abundance data loaded')),
                ('func_abund_ok', models.BooleanField(default=False, help_text='Function abundance data loaded')),
                ('comp_abund_ok', models.BooleanField(default=False, help_text='Compound abundance data loaded')),
                ('analysis_dir', models.TextField(blank=True, default=None, help_text='path to results of analysis, relative to OMICS_DATA_ROOT', null=True)),
                ('read_count', models.PositiveIntegerField(blank=True, default=None, help_text='number of read pairs (post-QC) used for assembly mapping', null=True)),
                ('reads_mapped_contigs', models.PositiveIntegerField(blank=True, default=None, help_text='number of reads mapped to contigs', null=True)),
                ('reads_mapped_genes', models.PositiveIntegerField(blank=True, default=None, help_text='number of reads mapped to genes', null=True)),
                ('project_id', models.TextField(blank=True, default='', help_text='Project accession, e.g. NCBI bioproject', max_length=32)),
                ('biosample', models.TextField(blank=True, default='', max_length=32)),
                ('geo_loc_name', models.TextField(blank=True, default='', max_length=64)),
                ('gaz_id', models.TextField(blank=True, default='', max_length=32, verbose_name='GAZ id')),
                ('latitude', models.TextField(blank=True, default='', max_length=16)),
                ('longitude', models.TextField(blank=True, default='', max_length=16)),
                ('collection_timestamp', models.DateTimeField(blank=True, default=None, null=True)),
                ('collection_ts_partial', models.CharField(blank=True, choices=[('date_only', 'date_only'), ('year_only', 'year_only'), ('month_only', 'month_only'), ('', '')], default='', max_length=10)),
                ('noaa_site', models.TextField(blank=True, default='', max_length=16, verbose_name='NOAA Site')),
                ('env_broad_scale', models.TextField(blank=True, default='', max_length=32)),
                ('env_local_scale', models.TextField(blank=True, default='', max_length=32)),
                ('env_medium', models.TextField(blank=True, default='', max_length=32)),
                ('keywords', models.TextField(blank=True, default='', max_length=32)),
                ('depth', models.TextField(blank=True, default='', max_length=16)),
                ('depth_sediment', models.TextField(blank=True, default='', max_length=16)),
                ('size_frac_up', models.TextField(blank=True, default='', max_length=16)),
                ('size_frac_low', models.TextField(blank=True, default='', max_length=16)),
                ('ph', models.TextField(blank=True, default='', max_length=8, verbose_name='pH')),
                ('temp', models.TextField(blank=True, default='', max_length=8)),
                ('calcium', models.TextField(blank=True, default='', max_length=8)),
                ('potassium', models.TextField(blank=True, default='', max_length=8)),
                ('magnesium', models.TextField(blank=True, default='', max_length=8)),
                ('ammonium', models.TextField(blank=True, default='', max_length=8)),
                ('nitrate', models.TextField(blank=True, default='', max_length=8)),
                ('total_phos', models.TextField(blank=True, default='', max_length=8)),
                ('diss_oxygen', models.TextField(blank=True, default='', max_length=8)),
                ('conduc', models.TextField(blank=True, default='', max_length=16)),
                ('secci', models.TextField(blank=True, default='', max_length=8)),
                ('turbidity', models.TextField(blank=True, default='', max_length=8)),
                ('part_microcyst', models.TextField(blank=True, default='', max_length=8)),
                ('diss_microcyst', models.TextField(blank=True, default='', max_length=8)),
                ('ext_phyco', models.TextField(blank=True, default='', max_length=8)),
                ('ext_microcyst', models.TextField(blank=True, default='', max_length=8)),
                ('ext_anatox', models.TextField(blank=True, default='', max_length=8)),
                ('chlorophyl', models.TextField(blank=True, default='', max_length=8)),
                ('diss_phos', models.TextField(blank=True, default='', max_length=8)),
                ('soluble_react_phos', models.TextField(blank=True, default='', max_length=8)),
                ('ammonia', models.TextField(blank=True, default='', max_length=8)),
                ('nitrate_nitrite', models.TextField(blank=True, default='', max_length=8)),
                ('urea', models.TextField(blank=True, default='', max_length=8)),
                ('part_org_carb', models.TextField(blank=True, default='', max_length=8)),
                ('part_org_nitro', models.TextField(blank=True, default='', max_length=8)),
                ('diss_org_carb', models.TextField(blank=True, default='', max_length=8)),
                ('col_dom', models.TextField(blank=True, default='', max_length=8)),
                ('suspend_part_matter', models.TextField(blank=True, default='', max_length=8)),
                ('suspend_vol_solid', models.TextField(blank=True, default='', max_length=8)),
                ('microcystis_count', models.PositiveIntegerField(blank=True, default=None, null=True)),
                ('planktothrix_count', models.PositiveIntegerField(blank=True, default=None, null=True)),
                ('anabaena_d_count', models.PositiveIntegerField(blank=True, default=None, null=True)),
                ('cylindrospermopsis_count', models.PositiveIntegerField(blank=True, default=None, null=True)),
                ('ice_cover', models.PositiveSmallIntegerField(blank=True, default=None, null=True)),
                ('chlorophyl_fluoresence', models.PositiveSmallIntegerField(blank=True, default=None, null=True)),
                ('sampling_device', models.TextField(blank=True, default='', max_length=32)),
                ('modified_or_experimental', models.BooleanField(default=False)),
                ('is_isolate', models.BooleanField(blank=True, default=None, null=True)),
                ('is_neg_control', models.BooleanField(blank=True, default=None, null=True)),
                ('is_pos_control', models.BooleanField(blank=True, default=None, null=True)),
                ('filt_volume', models.DecimalField(blank=True, decimal_places=3, default=None, max_digits=10, null=True)),
                ('filt_duration', models.DurationField(blank=True, default=None, null=True)),
                ('par', models.DecimalField(blank=True, decimal_places=2, default=None, max_digits=8, null=True)),
                ('qPCR_total', models.PositiveIntegerField(blank=True, default=None, null=True)),
                ('qPCR_mcyE', models.PositiveIntegerField(blank=True, default=None, null=True)),
                ('qPCR_sxtA', models.PositiveIntegerField(blank=True, default=None, null=True)),
                ('notes', models.TextField(blank=True, default='')),
                ('dataset', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.OMICS_DATASET_MODEL)),
            ],
            options={
                'default_manager_name': 'objects',
            },
        ),
        migrations.AddField(
            model_name='dataset',
            name='reference',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='glamr.reference'),
        ),
    ]
