# Generated by Django 4.2.15 on 2025-02-17 21:44
# with manual changes and additions

from django.conf import settings
from django.db import migrations, models
import mibios.omics.storage


def migrate_samples_fwd(apps, schema_editor):
    """
    Adjust analysis_dir. remove common 'omics/data' prefix that is now
    configured via settings.OMICS_PIPELINE_DATA
    """
    app, _, model = settings.OMICS_SAMPLE_MODEL.rpartition('.')
    Sample = apps.get_model(app, model)
    objs = []
    for obj in Sample.objects.all():
        if obj.analysis_dir:
            obj.analysis_dir = obj.analysis_dir.removeprefix('data/omics/')
            objs.append(obj)
    Sample.objects.bulk_update(objs, fields=['analysis_dir'])


def migrate_samples_rev(apps, schema_editor):
    """
    Restore common prefix 'data/omics' to analysis_dir
    """
    app, _, model = settings.OMICS_SAMPLE_MODEL.rpartition('.')
    Sample = apps.get_model(app, model)
    objs = []
    for obj in Sample.objects.all():
        if obj.analysis_dir and not obj.analysis_dir.startswith('data/omics/'):
            obj.analysis_dir = 'data/omics/' + obj.analysis_dir
            objs.append(obj)
    Sample.objects.bulk_update(objs, fields=['analysis_dir'])


def migrate_files_fwd(apps, schema_editor):
    """
    Populate new file_pipeline from old path and new file_globus from old
    public.
    """
    File = apps.get_model('omics', 'File')
    qs = File.objects.all()
    path_root = File._meta.get_field('path').root
    public_root = File._meta.get_field('public').root
    if path_root or public_root:
        # Assuming mods in previous migrations to set the File.path and
        # File.public (PathField) root to None.  Then obj.path and obj.public
        # below will give relative values.
        raise ValueError('Expecting PathField.root to be None for migration')
    for obj in qs:
        obj.file_pipeline.name = str(obj.path).removeprefix('data/omics/')
        if obj.public:
            obj.file_globus.name = str(obj.public).removeprefix('data/omics/')
    File.objects.bulk_update(qs, ['file_pipeline', 'file_globus'])


def migrate_files_rev(apps, schema_editor):
    """
    Re-populate old path from new file_pipeline and olf public from new
    file_globus
    """
    File = apps.get_model('omics', 'File')
    qs = File.objects.all()
    for obj in qs:
        obj.path = 'data/omics/' + obj.file_pipeline.name
        if obj.file_globus:
            obj.public = 'data/omics/' + obj.file_globus.name
    File.objects.bulk_update(qs, ['path', 'public'])


class Migration(migrations.Migration):

    dependencies = [
        ('omics', '0021_merge_0020_auto_20240719_1618_0020_auto_20240807_1714'),
    ]

    operations = [
        migrations.AddField(
            model_name='file',
            name='file_globus',
            field=models.FileField(blank=True, default='', storage=mibios.omics.storage.GlobusPublicStorage(), upload_to=None),
        ),
        migrations.AddField(
            model_name='file',
            name='file_local',
            field=models.FileField(blank=True, default='', storage=mibios.omics.storage.LocalPublicStorage(), upload_to=None),
        ),
        migrations.AddField(
            model_name='file',
            name='file_pipeline',
            field=models.FileField(blank=True, default='', storage=mibios.omics.storage.OmicsPipelineStorage(), upload_to=None),
        ),
        migrations.AlterField(
            model_name='sample',
            name='analysis_dir',
            field=models.TextField(blank=True, default=None, help_text='path to results of analysis, relative to OMICS_PIPELINE_DATA', null=True),
        ),
        migrations.AddConstraint(
            model_name='file',
            constraint=models.UniqueConstraint(condition=models.Q(('file_pipeline', ''), _negated=True), fields=('file_pipeline',), name='omics_file_file_pipline_unique'),
        ),
        migrations.AddConstraint(
            model_name='file',
            constraint=models.UniqueConstraint(condition=models.Q(('file_local', ''), _negated=True), fields=('file_local',), name='omics_file_file_local_unique'),
        ),
        migrations.AddConstraint(
            model_name='file',
            constraint=models.UniqueConstraint(condition=models.Q(('file_globus', ''), _negated=True), fields=('file_globus',), name='omics_file_file_globus_unique'),
        ),
        migrations.RunPython(
            migrate_files_fwd,
            migrate_files_rev,
        ),
        migrations.RunPython(
            migrate_samples_fwd,
            migrate_samples_rev,
        ),
        migrations.RemoveConstraint(
            model_name='file',
            name='omics_file_public_path_unique',
        ),
        migrations.RemoveField(
            model_name='file',
            name='path',
        ),
        migrations.RemoveField(
            model_name='file',
            name='public',
        ),
    ]
