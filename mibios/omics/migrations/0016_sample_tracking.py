# Generated by Django 3.2.19 on 2024-06-14 18:04
# Manually added RunPython methods

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import mibios.models
import mibios.umrad.fields
import pathlib

# import the real model class to get the Flag
from mibios.omics.models import SampleTracking as RealSTClass


FLAG_MAP = (
    ('meta_data_loaded', 'METADATA'),
    ('metag_pipeline_reg', 'PIPELINE'),
    ('contig_fasta_loaded', 'ASSEMBLY'),
    ('read_abundance_loaded', 'UR1ABUND'),
    ('tax_abund_ok', 'TAXABUND'),
)


def fwd_populate_sample_tracking(apps, schema_editor):
    """
    After creating the SampleTracking model, populate it with data from the
    Sample flag fields.
    """
    SampleTracking = apps.get_model('omics', 'SampleTracking')
    app, _, model = settings.OMICS_SAMPLE_MODEL.rpartition('.')
    Sample = apps.get_model(app, model)
    Flag = RealSTClass.Flag  # since SampleTracking is fake here

    flag_map = {
        attr: getattr(Flag, flag)
        for attr, flag in FLAG_MAP
    }
    for sample in Sample._meta.base_manager.all():
        for attr, flag in flag_map.items():
            if getattr(sample, attr):
                SampleTracking(flag=flag, sample=sample).save()


def rev_set_sample_flags(apps, schema_editor):
    """
    On reverse, set (some) sample flag fields from the (to be removed)
    SampleTracking data
    """
    # uncomment to disable this direction
    return

    SampleTracking = apps.get_model('omics', 'SampleTracking')
    app, _, model = settings.OMICS_SAMPLE_MODEL.rpartition('.')
    Sample = apps.get_model(app, model)
    Flag = RealSTClass.Flag  # since SampleTracking is fake here

    flag_map = {
        attr: getattr(Flag, flag)
        for attr, flag in FLAG_MAP
    }
    st_qs = SampleTracking._meta.base_manager.all()
    for sample in Sample._meta.base_manager.all():
        for attr, flag in flag_map.items():
            value = st_qs.filter(sample=sample, flag=flag_map[attr]).exists()
            setattr(sample, attr, value)
            sample.save()


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.OMICS_SAMPLE_MODEL),
        ('omics', '0015_auto_20240524_1105'),
    ]

    operations = [
        migrations.AlterField(
            model_name='file',
            name='filetype',
            field=models.PositiveSmallIntegerField(choices=[(1, 'metagenomic assembly, fasta format'), (2, 'metatranscriptome assembly, fasta format'), (3, 'functional abundance, csv format'), (4, 'taxonomic abundance, csv format'), (5, 'functional abundance (TPM) [csv]')], verbose_name='file type'),
        ),
        migrations.AlterField(
            model_name='file',
            name='md5sum',
            field=models.CharField(blank=True, max_length=32, verbose_name='MD5 sum'),
        ),
        migrations.AlterField(
            model_name='file',
            name='modtime',
            field=models.DateTimeField(verbose_name='modification time'),
        ),
        migrations.AlterField(
            model_name='file',
            name='path',
            field=mibios.umrad.fields.PathField(max_length=200, path=pathlib.PurePosixPath('/home/heinro/work/glamr-metag-test/data/omics'), recursive=True, unique=True, validators=[mibios.umrad.fields.PathPrefixValidator(pathlib.PurePosixPath('/home/heinro/work/glamr-metag-test/data/omics')), mibios.umrad.fields.PathPrefixValidator(pathlib.PurePosixPath('/home/heinro/work/glamr-metag-test/data/omics')), mibios.umrad.fields.PathPrefixValidator(pathlib.PurePosixPath('/home/heinro/work/glamr-metag-test/data/omics'))]),
        ),
        migrations.AlterField(
            model_name='file',
            name='public',
            field=mibios.umrad.fields.PathField(blank=True, max_length=200, null=True, path=pathlib.PurePosixPath('/geomicro/data7/GLAMR-Website/public'), recursive=True, validators=[mibios.umrad.fields.PathPrefixValidator(pathlib.PurePosixPath('/geomicro/data7/GLAMR-Website/public')), mibios.umrad.fields.PathPrefixValidator(pathlib.PurePosixPath('/geomicro/data7/GLAMR-Website/public')), mibios.umrad.fields.PathPrefixValidator(pathlib.PurePosixPath('/geomicro/data7/GLAMR-Website/public'))]),
        ),
        migrations.AlterField(
            model_name='sample',
            name='contig_fasta_loaded',
            field=models.BooleanField(default=False, help_text='fasta-formatted assembly is available', verbose_name='assembly available'),
        ),
        migrations.AlterField(
            model_name='sample',
            name='read_abundance_loaded',
            field=models.BooleanField(default=False, help_text='read-mapping-based (tophit_report) abundance against UniRef100', verbose_name='functional abundance available'),
        ),
        migrations.AlterField(
            model_name='sample',
            name='tax_abund_ok',
            field=models.BooleanField(default=False, help_text='abundance against taxonomy', verbose_name='taxonomic abundance available'),
        ),
        migrations.CreateModel(
            name='SampleTracking',
            fields=[
                ('id', mibios.models.AutoField(primary_key=True, serialize=False)),
                ('flag', models.CharField(choices=[('MD', 'meta data loaded'), ('PL', 'omics pipeline registered'), ('ASM', 'assembly loaded'), ('UAB', 'reads/UR100 abundance loaded'), ('TAB', 'taxa abundance loaded')], max_length=3)),
                ('timestamp', models.DateTimeField(auto_now=True)),
                ('sample', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.OMICS_SAMPLE_MODEL)),
            ],
        ),
        migrations.AddConstraint(
            model_name='sampletracking',
            constraint=models.UniqueConstraint(fields=('flag', 'sample'), name='uniq_samptrack_flag'),
        ),
        migrations.RunPython(fwd_populate_sample_tracking, rev_set_sample_flags),
    ]
